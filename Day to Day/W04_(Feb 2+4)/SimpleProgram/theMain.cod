; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG34325 DB	'Total = ', 00H
CONST	ENDS
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
EXTRN	strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN6
	DD	imagerel $LN6+156
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+976
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+72
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+111
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+209
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+81
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 010919H
	DD	06209H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	'<'
	DB	02H
	DB	0a5H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 010e11H
	DD	0620eH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 010919H
	DD	06209H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	0c1H, 03H
	DB	02H
	DB	'H'
	DB	04H
	DB	'A', 09H
	DB	02H
	DB	'~'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 022319H
	DD	0150111H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	09bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 010901H
	DD	04209H
xdata	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 124  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 125  :             return _Ok;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 126  :         }

  0000e	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
tv72 = 32
_Zero_uncaught_exceptions$ = 33
this$ = 64
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00009	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0000e	0f b6 c0	 movzx	 eax, al
  00011	85 c0		 test	 eax, eax
  00013	75 07		 jne	 SHORT $LN4@sentry
  00015	c6 44 24 20 01	 mov	 BYTE PTR tv72[rsp], 1
  0001a	eb 05		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0001c	c6 44 24 20 00	 mov	 BYTE PTR tv72[rsp], 0
$LN5@sentry:
  00021	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv72[rsp]
  00026	88 44 24 21	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rsp], al

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0002a	0f b6 44 24 21	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rsp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
$LN2@sentry:

; 120  :             }
; 121  :         }

  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00046	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0004b	90		 npad	 1
  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0001d	90		 npad	 1

; 93   :             if (!_Ostr.good()) {

  0001e	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00023	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00026	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0002a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0002f	48 03 c8	 add	 rcx, rax
  00032	48 8b c1	 mov	 rax, rcx
  00035	48 8b c8	 mov	 rcx, rax
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0003e	0f b6 c0	 movzx	 eax, al
  00041	85 c0		 test	 eax, eax
  00043	75 0b		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004a	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 95   :                 return;

  0004e	eb 77		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00050	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00055	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00058	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00061	48 03 c8	 add	 rcx, rax
  00064	48 8b c1	 mov	 rax, rcx
  00067	48 8b c8	 mov	 rcx, rax
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00070	48 89 44 24 20	 mov	 QWORD PTR _Tied$[rsp], rax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  00075	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Tied$[rsp], 0
  0007b	74 0c		 je	 SHORT $LN4@sentry
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00082	48 39 44 24 20	 cmp	 QWORD PTR _Tied$[rsp], rax
  00087	75 0b		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  00089	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008e	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 101  :                 return;

  00092	eb 33		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  00094	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Tied$[rsp]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  0009f	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a7	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ab	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000b0	48 03 c8	 add	 rcx, rax
  000b3	48 8b c1	 mov	 rax, rcx
  000b6	48 8b c8	 mov	 rcx, rax
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000c4	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 106  :         }

  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d0	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 32
tv72 = 40
this$ = 64
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 28	 mov	 QWORD PTR tv72[rsp], rax
  00016	48 8b 44 24 28	 mov	 rax, QWORD PTR tv72[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv72[rsp]
  00027	48 03 c8	 add	 rcx, rax
  0002a	48 8b c1	 mov	 rax, rcx
  0002d	48 8b c8	 mov	 rcx, rax
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00036	48 89 44 24 20	 mov	 QWORD PTR _Rdbuf$[rsp], rax

; 80   :             if (_Rdbuf) {

  0003b	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Rdbuf$[rsp], 0
  00041	74 11		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR _Rdbuf$[rsp]
  00048	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Rdbuf$[rsp]
  00050	ff 50 10	 call	 QWORD PTR [rax+16]
  00053	90		 npad	 1
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  00054	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00058	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 32
tv73 = 40
this$ = 64
_Ostr$ = 72
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00018	48 89 08	 mov	 QWORD PTR [rax], rcx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  00028	48 8b 44 24 28	 mov	 rax, QWORD PTR tv73[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00034	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv73[rsp]
  00039	48 03 c8	 add	 rcx, rax
  0003c	48 8b c1	 mov	 rax, rcx
  0003f	48 8b c8	 mov	 rcx, rax
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00048	48 89 44 24 20	 mov	 QWORD PTR _Rdbuf$[rsp], rax

; 73   :             if (_Rdbuf) {

  0004d	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Rdbuf$[rsp], 0
  00053	74 10		 je	 SHORT $LN2@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR _Rdbuf$[rsp]
  0005a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Rdbuf$[rsp]
  00062	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 75   :             }
; 76   :         }

  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006e	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 48
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 979  :     _Ostr.put(_Ostr.widen('\n'));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0001a	48 03 c8	 add	 rcx, rax
  0001d	48 8b c1	 mov	 rax, rcx
  00020	b2 0a		 mov	 dl, 10
  00022	48 8b c8	 mov	 rcx, rax
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  0002b	0f b6 d0	 movzx	 edx, al
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 980  :     _Ostr.flush();

  00039	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 981  :     return _Ostr;

  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]

; 982  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
__$ArrayPad$ = 152
_Ostr$ = 176
_Val$ = 184
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  0002b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00033	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00038	48 89 44 24 30	 mov	 QWORD PTR _Count$[rsp], rax

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0003d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00045	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00048	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0004c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	48 8b c8	 mov	 rcx, rax
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00063	48 85 c0	 test	 rax, rax
  00066	7e 5f		 jle	 SHORT $LN17@operator
  00068	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00070	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00073	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00077	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0007f	48 03 c8	 add	 rcx, rax
  00082	48 8b c1	 mov	 rax, rcx
  00085	48 8b c8	 mov	 rcx, rax
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0008e	48 3b 44 24 30	 cmp	 rax, QWORD PTR _Count$[rsp]
  00093	7e 32		 jle	 SHORT $LN17@operator
  00095	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0009d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000ac	48 03 c8	 add	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000bb	48 2b 44 24 30	 sub	 rax, QWORD PTR _Count$[rsp]
  000c0	48 89 44 24 58	 mov	 QWORD PTR tv137[rsp], rax
  000c5	eb 09		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000c7	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv137[rsp], 0
$LN18@operator:
  000d0	48 8b 44 24 58	 mov	 rax, QWORD PTR tv137[rsp]
  000d5	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  000da	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  000e2	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000ea	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ef	90		 npad	 1

; 742  : 
; 743  :     if (!_Ok) {

  000f0	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000f8	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000fd	0f b6 c0	 movzx	 eax, al
  00100	85 c0		 test	 eax, eax
  00102	75 10		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  00104	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00108	83 c8 04	 or	 eax, 4
  0010b	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 745  :     } else { // state okay, insert

  0010f	e9 52 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN
; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00114	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0011c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0011f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00123	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0012b	48 03 c8	 add	 rcx, rax
  0012e	48 8b c1	 mov	 rax, rcx
  00131	48 8b c8	 mov	 rcx, rax
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0013a	89 44 24 38	 mov	 DWORD PTR tv139[rsp], eax
  0013e	8b 44 24 38	 mov	 eax, DWORD PTR tv139[rsp]
  00142	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00147	83 f8 40	 cmp	 eax, 64			; 00000040H
  0014a	0f 84 bd 00 00
	00		 je	 $LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00150	eb 0d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00152	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  00157	48 ff c8	 dec	 rax
  0015a	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN4@operator:
  0015f	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  00165	0f 8e a2 00 00
	00		 jle	 $LN11@operator

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0016b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00173	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00176	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0017a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00182	48 03 c8	 add	 rcx, rax
  00185	48 8b c1	 mov	 rax, rcx
  00188	48 8b c8	 mov	 rcx, rax
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00191	88 44 24 24	 mov	 BYTE PTR tv294[rsp], al
  00195	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0019d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001a4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  001ac	48 03 c8	 add	 rcx, rax
  001af	48 8b c1	 mov	 rax, rcx
  001b2	48 8b c8	 mov	 rcx, rax
  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001bb	48 89 44 24 60	 mov	 QWORD PTR tv295[rsp], rax
  001c0	0f b6 54 24 24	 movzx	 edx, BYTE PTR tv294[rsp]
  001c5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv295[rsp]
  001ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001d0	89 44 24 3c	 mov	 DWORD PTR tv296[rsp], eax
  001d4	8b 44 24 3c	 mov	 eax, DWORD PTR tv296[rsp]
  001d8	89 44 24 40	 mov	 DWORD PTR $T1[rsp], eax
  001dc	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001e1	89 44 24 44	 mov	 DWORD PTR $T2[rsp], eax
  001e5	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T1[rsp]
  001ea	48 8d 4c 24 44	 lea	 rcx, QWORD PTR $T2[rsp]
  001ef	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001f4	0f b6 c0	 movzx	 eax, al
  001f7	85 c0		 test	 eax, eax
  001f9	74 0d		 je	 SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  001fb	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  001ff	83 c8 04	 or	 eax, 4
  00202	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 751  :                     break;

  00206	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

  00208	e9 45 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0020d	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  00212	75 5f		 jne	 SHORT $LN13@operator
  00214	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0021c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0021f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00223	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0022b	48 03 c8	 add	 rcx, rax
  0022e	48 8b c1	 mov	 rax, rcx
  00231	48 8b c8	 mov	 rcx, rax
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0023a	48 89 44 24 68	 mov	 QWORD PTR tv297[rsp], rax
  0023f	4c 8b 44 24 30	 mov	 r8, QWORD PTR _Count$[rsp]
  00244	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR _Val$[rsp]
  0024c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv297[rsp]
  00251	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00257	48 89 44 24 70	 mov	 QWORD PTR tv298[rsp], rax
  0025c	48 8b 44 24 30	 mov	 rax, QWORD PTR _Count$[rsp]
  00261	48 39 44 24 70	 cmp	 QWORD PTR tv298[rsp], rax
  00266	74 0b		 je	 SHORT $LN13@operator

; 757  :             _State |= ios_base::badbit;

  00268	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0026c	83 c8 04	 or	 eax, 4
  0026f	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

  00273	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  00278	0f 85 bd 00 00
	00		 jne	 $LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  0027e	eb 0d		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00280	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  00285	48 ff c8	 dec	 rax
  00288	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN7@operator:
  0028d	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  00293	0f 8e a2 00 00
	00		 jle	 $LN14@operator

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00299	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002a1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a4	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002a8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002b0	48 03 c8	 add	 rcx, rax
  002b3	48 8b c1	 mov	 rax, rcx
  002b6	48 8b c8	 mov	 rcx, rax
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002bf	88 44 24 25	 mov	 BYTE PTR tv299[rsp], al
  002c3	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002cb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ce	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002d2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002da	48 03 c8	 add	 rcx, rax
  002dd	48 8b c1	 mov	 rax, rcx
  002e0	48 8b c8	 mov	 rcx, rax
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002e9	48 89 44 24 78	 mov	 QWORD PTR tv300[rsp], rax
  002ee	0f b6 54 24 25	 movzx	 edx, BYTE PTR tv299[rsp]
  002f3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv300[rsp]
  002f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  002fe	89 44 24 48	 mov	 DWORD PTR tv301[rsp], eax
  00302	8b 44 24 48	 mov	 eax, DWORD PTR tv301[rsp]
  00306	89 44 24 4c	 mov	 DWORD PTR $T3[rsp], eax
  0030a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0030f	89 44 24 50	 mov	 DWORD PTR $T4[rsp], eax
  00313	48 8d 54 24 4c	 lea	 rdx, QWORD PTR $T3[rsp]
  00318	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]
  0031d	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00322	0f b6 c0	 movzx	 eax, al
  00325	85 c0		 test	 eax, eax
  00327	74 0d		 je	 SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

  00329	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0032d	83 c8 04	 or	 eax, 4
  00330	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 764  :                     break;

  00334	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

  00336	e9 45 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  0033b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00343	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00346	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0034a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00352	48 03 c8	 add	 rcx, rax
  00355	48 8b c1	 mov	 rax, rcx
  00358	33 d2		 xor	 edx, edx
  0035a	48 8b c8	 mov	 rcx, rax
  0035d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00363	90		 npad	 1
  00364	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 770  :         _CATCH_IO_(ios_base, _Ostr)
; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  00366	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0036e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00371	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00375	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0037d	48 03 c8	 add	 rcx, rax
  00380	48 8b c1	 mov	 rax, rcx
  00383	45 33 c0	 xor	 r8d, r8d
  00386	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  0038a	48 8b c8	 mov	 rcx, rax
  0038d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 774  :     return _Ostr;

  00393	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0039b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR $T5[rsp], rax
  003a3	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  003ab	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003b0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]

; 775  : }

  003b8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003c0	48 33 cc	 xor	 rcx, rsp
  003c3	e8 00 00 00 00	 call	 __security_check_cookie
  003c8	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  003cf	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
__$ArrayPad$ = 152
_Ostr$ = 176
_Val$ = 184
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rbp]
  00010	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
__$ArrayPad$ = 152
_Ostr$ = 176
_Val$ = 184
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000d	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0001b	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00022	48 03 c8	 add	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	41 b0 01	 mov	 r8b, 1
  0002b	ba 04 00 00 00	 mov	 edx, 4
  00030	48 8b c8	 mov	 rcx, rax
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00039	90		 npad	 1
  0003a	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
  00047	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
__$ArrayPad$ = 152
_Ostr$ = 176
_Val$ = 184
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rbp]
  00010	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
__$ArrayPad$ = 152
_Ostr$ = 176
_Val$ = 184
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000d	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0001b	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00022	48 03 c8	 add	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	41 b0 01	 mov	 r8b, 1
  0002b	ba 04 00 00 00	 mov	 edx, 4
  00030	48 8b c8	 mov	 rcx, rax
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00039	90		 npad	 1
  0003a	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
  00047	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
; File T:\z_FS\1156\2021W\Code\1156_W2021\Day to Day\W04_(Feb 2+4)\SimpleProgram\theMain.cpp
;	COMDAT main
_TEXT	SEGMENT
index$1 = 32
total$ = 36
myArray$ = 40
main	PROC						; COMDAT

; 6    : {

$LN6:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 7    : 	int myArray[] = { 1, 2, 3, 4, 5 };

  00004	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR myArray$[rsp], 1
  0000c	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR myArray$[rsp+4], 2
  00014	c7 44 24 30 03
	00 00 00	 mov	 DWORD PTR myArray$[rsp+8], 3
  0001c	c7 44 24 34 04
	00 00 00	 mov	 DWORD PTR myArray$[rsp+12], 4
  00024	c7 44 24 38 05
	00 00 00	 mov	 DWORD PTR myArray$[rsp+16], 5

; 8    : 	int total = 0;

  0002c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR total$[rsp], 0

; 9    : 	for ( unsigned int index = 0; index != 5; index++ )

  00034	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR index$1[rsp], 0
  0003c	eb 0a		 jmp	 SHORT $LN4@main
$LN2@main:
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR index$1[rsp]
  00042	ff c0		 inc	 eax
  00044	89 44 24 20	 mov	 DWORD PTR index$1[rsp], eax
$LN4@main:
  00048	83 7c 24 20 05	 cmp	 DWORD PTR index$1[rsp], 5
  0004d	74 16		 je	 SHORT $LN3@main

; 10   : 	{
; 11   : 		total += myArray[index];

  0004f	8b 44 24 20	 mov	 eax, DWORD PTR index$1[rsp]
  00053	8b 44 84 28	 mov	 eax, DWORD PTR myArray$[rsp+rax*4]
  00057	8b 4c 24 24	 mov	 ecx, DWORD PTR total$[rsp]
  0005b	03 c8		 add	 ecx, eax
  0005d	8b c1		 mov	 eax, ecx
  0005f	89 44 24 24	 mov	 DWORD PTR total$[rsp], eax

; 12   : 	}

  00063	eb d9		 jmp	 SHORT $LN2@main
$LN3@main:

; 13   : 
; 14   : 	std::cout << "Total = " << total << std::endl;

  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG34325
  0006c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00073	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00078	8b 54 24 24	 mov	 edx, DWORD PTR total$[rsp]
  0007c	48 8b c8	 mov	 rcx, rax
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 15   : 
; 16   : 	return 0;

  00095	33 c0		 xor	 eax, eax

; 17   : }

  00097	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009b	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 456  :         return static_cast<int_type>(EOF);

  00000	b8 ff ff ff ff	 mov	 eax, -1

; 457  :     }

  00005	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
_Left$ = 32
_Right$ = 40
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 447  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 448  :         return _Left == _Right;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00018	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0001a	39 08		 cmp	 DWORD PTR [rax], ecx
  0001c	75 09		 jne	 SHORT $LN3@eq_int_typ
  0001e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv65[rsp], 1
  00025	eb 07		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00027	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv65[rsp], 0
$LN4@eq_int_typ:
  0002e	0f b6 04 24	 movzx	 eax, BYTE PTR tv65[rsp]

; 449  :     }

  00032	48 83 c4 18	 add	 rsp, 24
  00036	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 48
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 373  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 374  :         // find length of null-terminated string
; 375  : #if _HAS_CXX17
; 376  : #ifdef __cpp_char8_t
; 377  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 378  : #if _HAS_U8_INTRINSICS
; 379  :             return __builtin_u8strlen(_First);
; 380  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 381  :             return _Primary_char_traits::length(_First);
; 382  : #endif // _HAS_U8_INTRINSICS
; 383  :         } else
; 384  : #endif // __cpp_char8_t
; 385  :         {
; 386  :             return __builtin_strlen(_First);
; 387  :         }
; 388  : #else // _HAS_CXX17
; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  0000e	e8 00 00 00 00	 call	 strlen

; 390  : #endif // _HAS_CXX17
; 391  :     }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
END
